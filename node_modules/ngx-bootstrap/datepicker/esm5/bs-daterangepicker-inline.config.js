/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { BsDatepickerConfig } from './bs-datepicker.config';
import * as ɵngcc0 from '@angular/core';
var BsDaterangepickerInlineConfig = /** @class */ (function (_super) {
    tslib_1.__extends(BsDaterangepickerInlineConfig, _super);
    function BsDaterangepickerInlineConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // DatepickerRenderOptions
        _this.displayMonths = 2;
        /**
         * turn on/off animation
         */
        _this.isAnimated = false;
        return _this;
    }
BsDaterangepickerInlineConfig.ɵfac = function BsDaterangepickerInlineConfig_Factory(t) { return ɵBsDaterangepickerInlineConfig_BaseFactory(t || BsDaterangepickerInlineConfig); };
BsDaterangepickerInlineConfig.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BsDaterangepickerInlineConfig, factory: function (t) { return BsDaterangepickerInlineConfig.ɵfac(t); } });
var ɵBsDaterangepickerInlineConfig_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(BsDaterangepickerInlineConfig);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BsDaterangepickerInlineConfig, [{
        type: Injectable
    }], null, null); })();
    return BsDaterangepickerInlineConfig;
}(BsDatepickerConfig));
export { BsDaterangepickerInlineConfig };
if (false) {
    /** @type {?} */
    BsDaterangepickerInlineConfig.prototype.displayMonths;
    /**
     * turn on/off animation
     * @type {?}
     */
    BsDaterangepickerInlineConfig.prototype.isAnimated;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnMtZGF0ZXJhbmdlcGlja2VyLWlubGluZS5jb25maWcuanMiLCJzb3VyY2VzIjpbIm5nOi9uZ3gtYm9vdHN0cmFwL2RhdGVwaWNrZXIvYnMtZGF0ZXJhbmdlcGlja2VyLWlubGluZS5jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDOztBQUU1RDtBQUN5RCxJQUFOLHlEQUFrQjtBQUFDLElBRHRFO0FBQzZCLFFBRDdCLHFFQU1DO0FBQ0Q7QUFBbUMsUUFKL0IsbUJBQWEsR0FBRyxDQUFDLENBQUM7QUFDdEI7QUFBWTtBQUNBO0FBQ1osUUFESSxnQkFBVSxHQUFHLEtBQUssQ0FBQztBQUN2QjtBQUNvQixJQURwQixDQUFDO2lFQU5BLFVBQVU7Ozs7OzBCQUNMO0FBQUMsSUFLUCxvQ0FBQztBQUNBLENBREEsQUFORCxDQUNtRCxrQkFBa0IsR0FLcEU7QUFDRCxTQU5hLDZCQUE2QjtBQUFJO0FBQWE7QUFDbkQsSUFDSixzREFBa0I7QUFDdEI7QUFBUTtBQUNKO0FBQWlCO0FBRWxCLElBRkMsbURBQW1COztBQVJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFDQSxBQUFBLEFBREEsQUFBQSxBQU1BLEFBSEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBTkEsQUFBQSxBQU1BLEFBQUEsQUFBQSxBQU5BLEFBQ0EsQUFBQSxBQUtBLEFBTEEsQUFBQSxBQUVBLEFBQUEsQUFFQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQnNEYXRlcGlja2VyQ29uZmlnIH0gZnJvbSAnLi9icy1kYXRlcGlja2VyLmNvbmZpZyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBCc0RhdGVyYW5nZXBpY2tlcklubGluZUNvbmZpZyBleHRlbmRzIEJzRGF0ZXBpY2tlckNvbmZpZyB7XG4gICAgLy8gRGF0ZXBpY2tlclJlbmRlck9wdGlvbnNcbiAgICBkaXNwbGF5TW9udGhzID0gMjtcbiAgICAvKiogdHVybiBvbi9vZmYgYW5pbWF0aW9uICovXG4gICAgaXNBbmltYXRlZCA9IGZhbHNlO1xufVxuIl19